"""
Script para testar a tradução e execução de código binário complexo.
Este script valida o funcionamento do interpretador binário aprimorado.
"""

import sys
import os
from ui.binary_interpreter_enhanced_v2 import BinaryInterpreterEnhancedV2
from ui.binary_code_executor_enhanced_v2 import BinaryCodeExecutorEnhancedV2

def test_binary_translation():
    """Testa a tradução de código binário para Python."""
    print("Iniciando testes de tradução binária...")
    
    # Inicializa o interpretador
    interpreter = BinaryInterpreterEnhancedV2()
    executor = BinaryCodeExecutorEnhancedV2(interpreter)
    
    # Teste 1: Código simples com print
    print("\nTeste 1: Código simples com print")
    binary_code_1 = "01111100 00101000 01111111 01101111 01101100 01100001 01111111 00101001"
    python_code_1 = interpreter.traduzir_binario(binary_code_1)
    print(f"Binário: {binary_code_1}")
    print(f"Python: {python_code_1}")
    
    # Teste 2: Atribuição e operação aritmética
    print("\nTeste 2: Atribuição e operação aritmética")
    binary_code_2 = "01100001 10001001 00110101 00100000 01100010 10001001 00110011 00100000 01110011 01101111 01101101 01100001 10001001 01100001 10001010 01100010"
    python_code_2 = interpreter.traduzir_binario(binary_code_2)
    print(f"Binário: {binary_code_2}")
    print(f"Python: {python_code_2}")
    
    # Teste 3: Condicional if-else
    print("\nTeste 3: Condicional if-else")
    binary_code_3 = """
    01100001 10001001 00110101 00100000
    01100010 10001001 00110011 00100000
    01110011 01101111 01101101 01100001 10001001 01100001 10001010 01100010 00100000
    10000011 00100000 01110011 01101111 01101101 01100001 10001110 00111000 10010001 00100000
    01111100 00101000 01111111 01100001 00100000 01110011 01101111 01101101 01100001 00100000 01100101 00100000 00111000 01111111 00101001 00100000
    10000100 10010001 00100000
    01111100 00101000 01111111 01100001 00100000 01110011 01101111 01101101 01100001 00100000 01101110 01100001 01101111 00100000 01100101 00100000 00111000 01111111 00101001
    """
    python_code_3 = interpreter.traduzir_binario(binary_code_3)
    print(f"Binário: {binary_code_3}")
    print(f"Python: {python_code_3}")
    
    # Teste 4: Loop while
    print("\nTeste 4: Loop while")
    binary_code_4 = """
    01100011 01101111 01101110 01110100 01100001 01100100 01101111 01110010 10001001 00110000 00100000
    10000101 00100000 01100011 01101111 01101110 01110100 01100001 01100100 01101111 01110010 10001111 00110101 10010001 00100000
    01111100 00101000 01100011 01101111 01101110 01110100 01100001 01100100 01101111 01110010 00101001 00100000
    01100011 01101111 01101110 01110100 01100001 01100100 01101111 01110010 10001001 01100011 01101111 01101110 01110100 01100001 01100100 01101111 01110010 10001010 00110001
    """
    python_code_4 = interpreter.traduzir_binario(binary_code_4)
    print(f"Binário: {binary_code_4}")
    print(f"Python: {python_code_4}")
    
    # Teste 5: Função
    print("\nTeste 5: Função")
    binary_code_5 = """
    10000111 00100000 01110011 01101111 01101101 01100001 00101000 01100001 00101100 00100000 01100010 00101001 10010001 00100000
    01110010 01100101 01110100 01110101 01110010 01101110 00100000 01100001 10001010 01100010 00100000
    
    01110010 01100101 01110011 01110101 01101100 01110100 01100001 01100100 01101111 10001001 01110011 01101111 01101101 01100001 00101000 00110011 00101100 00100000 00110100 00101001 00100000
    01111100 00101000 01110010 01100101 01110011 01110101 01101100 01110100 01100001 01100100 01101111 00101001
    """
    python_code_5 = interpreter.traduzir_binario(binary_code_5)
    print(f"Binário: {binary_code_5}")
    print(f"Python: {python_code_5}")
    
    print("\nTestes de tradução concluídos!")

def test_binary_execution():
    """Testa a execução de código binário."""
    print("\nIniciando testes de execução binária...")
    
    # Inicializa o interpretador
    interpreter = BinaryInterpreterEnhancedV2()
    executor = BinaryCodeExecutorEnhancedV2(interpreter)
    
    # Teste 1: Execução de print simples
    print("\nTeste 1: Execução de print simples")
    binary_code_1 = "01111100 00101000 01111111 01001111 01101100 01100001 00100000 01001101 01110101 01101110 01100100 01101111 01111111 00101001"
    result_1 = executor.execute_binary_code(binary_code_1)
    print(result_1)
    
    # Teste 2: Execução de cálculo e print
    print("\nTeste 2: Execução de cálculo e print")
    binary_code_2 = """
    01100001 10001001 00110101 00100000
    01100010 10001001 00110011 00100000
    01110011 01101111 01101101 01100001 10001001 01100001 10001010 01100010 00100000
    01111100 00101000 01111111 01010011 01101111 01101101 01100001 10010001 00100000 01111111 00101100 00100000 01110011 01101111 01101101 01100001 00101001
    """
    result_2 = executor.execute_binary_code(binary_code_2)
    print(result_2)
    
    # Teste 3: Execução de condicional
    print("\nTeste 3: Execução de condicional")
    binary_code_3 = """
    01100001 10001001 00110101 00100000
    01100010 10001001 00110011 00100000
    01110011 01101111 01101101 01100001 10001001 01100001 10001010 01100010 00100000
    10000011 00100000 01110011 01101111 01101101 01100001 10001110 00111000 10010001 00100000
    01111100 00101000 01111111 01000001 00100000 01110011 01101111 01101101 01100001 00100000 01100101 00100000 00111000 01111111 00101001 00100000
    10000100 10010001 00100000
    01111100 00101000 01111111 01000001 00100000 01110011 01101111 01101101 01100001 00100000 01101110 01100001 01101111 00100000 01100101 00100000 00111000 01111111 00101001
    """
    result_3 = executor.execute_binary_code(binary_code_3)
    print(result_3)
    
    # Teste 4: Execução de loop
    print("\nTeste 4: Execução de loop")
    binary_code_4 = """
    01100011 01101111 01101110 01110100 01100001 01100100 01101111 01110010 10001001 00110000 00100000
    10000101 00100000 01100011 01101111 01101110 01110100 01100001 01100100 01101111 01110010 10001111 00110101 10010001 00100000
    01111100 00101000 01100011 01101111 01101110 01110100 01100001 01100100 01101111 01110010 00101001 00100000
    01100011 01101111 01101110 01110100 01100001 01100100 01101111 01110010 10001001 01100011 01101111 01101110 01110100 01100001 01100100 01101111 01110010 10001010 00110001
    """
    result_4 = executor.execute_binary_code(binary_code_4)
    print(result_4)
    
    # Teste 5: Execução de função
    print("\nTeste 5: Execução de função")
    binary_code_5 = """
    10000111 00100000 01110011 01101111 01101101 01100001 00101000 01100001 00101100 00100000 01100010 00101001 10010001 00100000
    01110010 01100101 01110100 01110101 01110010 01101110 00100000 01100001 10001010 01100010 00100000
    
    01110010 01100101 01110011 01110101 01101100 01110100 01100001 01100100 01101111 10001001 01110011 01101111 01101101 01100001 00101000 00110011 00101100 00100000 00110100 00101001 00100000
    01111100 00101000 01111111 01010010 01100101 01110011 01110101 01101100 01110100 01100001 01100100 01101111 10010001 00100000 01111111 00101100 00100000 01110010 01100101 01110011 01110101 01101100 01110100 01100001 01100100 01101111 00101001
    """
    result_5 = executor.execute_binary_code(binary_code_5)
    print(result_5)
    
    print("\nTestes de execução concluídos!")

if __name__ == "__main__":
    test_binary_translation()
    test_binary_execution()

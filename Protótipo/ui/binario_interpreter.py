class BinarioInterpreter:
    def __init__(self):
        self.binary_keywords = {
            # Dígitos
            "00110000": "0", "00110001": "1", "00110010": "2", "00110011": "3",
            "00110100": "4", "00110101": "5", "00110110": "6", "00110111": "7",
            "00111000": "8", "00111001": "9",

            # Letras maiúsculas
            "01000001": "A", "01000010": "B", "01000011": "C", "01000100": "D",
            "01000101": "E", "01000110": "F", "01000111": "G", "01001000": "H",
            "01001001": "I", "01001010": "J", "01001011": "K", "01001100": "L",
            "01001101": "M", "01001110": "N", "01001111": "O", "01010000": "P",
            "01010001": "Q", "01010010": "R", "01010011": "S", "01010100": "T",
            "01010101": "U", "01010110": "V", "01010111": "W", "01011000": "X",
            "01011001": "Y", "01011010": "Z",

            # Letras minúsculas
            "01100001": "a", "01100010": "b", "01100011": "c", "01100100": "d",
            "01100101": "e", "01100110": "f", "01100111": "g", "01101000": "h",
            "01101001": "i", "01101010": "j", "01101011": "k", "01101100": "l",
            "01101101": "m", "01101110": "n", "01101111": "o", "01110000": "p",
            "01110001": "q", "01110010": "r", "01110011": "s", "01110100": "t",
            "01110101": "u", "01110110": "v", "01110111": "w", "01111000": "x",
            "01111001": "y", "01111010": "z",

            # Palavras-chave
            "01111011": "var", "01111100": "print", "01111111": "\"", "01111110": "input",
            "10000000": "int", "10000001": "float", "10000010": "str", "10000011": "if",
            "10000100": "else", "10000101": "while", "10000110": "for", "10000111": "def",
            "10001000": "return", "10001001": "=", "10001010": "+", "10001011": "-",
            "10001100": "*", "10001101": "/", "10001110": "==", "00101000": "(",
            "00101001": ")", "10010001": ":", "10010010": "print","00100000": "espaco",
            "10010011": "_",    # Underline (_)
            "10010100": "{",    # Chave aberta ({)
            "10010101": "}",    # Chave fechada (})
            "10010110": "[",    # Colchete aberto ([)
            "10010111": "]",    # Colchete fechado (])
            "10011000": "'",    # Aspas simples (')
            "10011001": ",",    # Vírgula (,)
            "10011010": ".",    # Ponto final (.)
            "10011011": ";",    # Ponto e vírgula (;)
            "10011100": "\\",   # Barra invertida (\)
            "10011101": "%",    # Módulo (%)
            "10011110": "!",    # Exclamação (!)
            "10011111": "<",    # Menor que (<)
            "10100000": ">",    # Maior que (>)
            "10100001": "&",    # Operador lógico (AND)
            "10100010": "|",    # Operador lógico (OR)
        }

    def traduzir_binario(self, codigo_binario: str) -> str:
        linhas = codigo_binario.strip().splitlines()
        resultado = []
        for linha in linhas:
            palavras_binarias = linha.strip().split()
            traduzidas = [self.binary_keywords.get(b, f"[{b}]") for b in palavras_binarias]
            resultado.append(" ".join(traduzidas))
        return "\n".join(resultado)
    def converter_para_binario(self, texto):
        binario = ' '.join(format(ord(c), '08b') for c in texto)
        return binario
